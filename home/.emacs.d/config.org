#+TITLE: Mike's GNU Emacs Config
#+AUTHOR: Mike Barker
#+DESCRIPTION: Mike's Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#package-management][Package Management]]
  - [[#straight][straight]]
  - [[#use-package][use-package]]
- [[#packages][Packages]]
  - [[#all-the-icons][all-the-icons]]
  - [[#buffer-move-emacsmirror][buffer-move (emacsmirror)]]
  - [[#company][company]]
  - [[#consult-embark-orderless-marginalia-vertico][consult, embark, orderless, marginalia, vertico]]
  - [[#dashboard][dashboard]]
  - [[#diminish][diminish]]
  - [[#dired-open-peek-dired][dired-open, peek-dired]]
  - [[#eshell-syntax-highlighting][eshell-syntax-highlighting]]
  - [[#evil][evil]]
  - [[#evil-org-mode][evil-org-mode]]
  - [[#evil-tutor][evil-tutor]]
  - [[#flycheck][flycheck]]
  - [[#general][general]]
  - [[#git-timemachine][git-timemachine]]
  - [[#hl-todo][hl-todo]]
  - [[#ligature][ligature]]
  - [[#magit][magit]]
  - [[#neotree][neotree]]
  - [[#org-bullets][org-bullets]]
  - [[#projectile][projectile]]
  - [[#rainbow-delimeters][rainbow-delimeters]]
  - [[#rainbow-mode][rainbow-mode]]
  - [[#sudo-edit][sudo-edit]]
  - [[#themes][themes]]
  - [[#toc-org][toc-org]]
  - [[#vterm][vterm]]
  - [[#vterm-toggle][vterm-toggle]]
  - [[#which-key][which-key]]
- [[#emacs-settings][Emacs Settings]]
  - [[#customize][Customize]]
  - [[#defaults][Defaults]]
  - [[#dired][Dired]]
  - [[#environment][Environment]]
  - [[#eshell][Eshell]]
  - [[#lock-buffers][Lock Buffers]]
  - [[#backup][Backup]]
  - [[#org-mode][Org Mode]]
  - [[#server][Server]]
  - [[#spelling][Spelling]]
  - [[#theme][Theme]]
  - [[#ui][UI]]
  - [[#zoom-text-inout][Zoom Text In/Out]]

* Package Management
** straight
I am using the *straight* package manager instead of the default emacs
*pacakge.el* package manager.

Emacs is extended by implementing additional features in packages,
which are Emacs Lisp libraries. These could be written by you or
provided by someone else.

https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html

Next-generation, purely functional package manager for the Emacs hacker.

https://github.com/radian-software/straight.el
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

#+end_src

** use-package
The use-package macro allows you to set up package customization in
your init file in a declarative way.

https://www.gnu.org/software/emacs/manual/html_mono/use-package.html
#+begin_src emacs-lisp
;; Use straight to 'install' use-package
(straight-use-package 'use-package)

;; Force use-package to use straight.el to automatically install missing packages
(setq straight-use-package-by-default t)

;; Initial `use-package' configuration.
(setq-default use-package-always-defer  t        ; Always defer loading package
              use-package-always-ensure t        ; Install package if not installed
              use-package-enable-imenu-support t ; Let imenu find use-package definitions
              use-package-expand-minimally t     ; expand code is as minimal as possible
              use-package-verbose nil)           ; Don't report loading details

(require 'use-package)
#+end_src

* Packages
** all-the-icons
This is an icon set that can be used with dashboard, dired, ibuffer
and other Emacs programs.

https://github.com/domtronn/all-the-icons.el
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))
#+end_src
Adds dired support to all-the-icons

https://github.com/jtbm37/all-the-icons-dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src
All the icons completion

https://github.com/iyefrat/all-the-icons-completion
#+begin_src emacs-lisp
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode))
#+end_src

** buffer-move (emacsmirror)
Move buffer up, down, left, right
https://github.com/emacsmirror/buffer-move
#+begin_src emacs-lisp
;; (elpaca (buffer-move :host github :repo "emacsmirror/buffer-move"))
(use-package buffer-move
  :straight buffer-move)
#+end_src

** company
Company is a text completion framework for Emacs. The name stands for
"complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.

https://company-mode.github.io/
#+begin_src emacs-lisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

** COMMENT counsel, ivy and swipper
== DISABLED ==
Flexible, simple tools for minibuffer completion in Emacs
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

https://github.com/abo-abo/swiper
#+begin_comment
#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev))
#+end_src
#+end_comment

** consult, embark, orderless, marginalia, vertico
*** Configuration for Consult
https://github.com/minad/consult

#+begin_src emacs-lisp
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  ;; :bind (;; C-c bindings in `mode-specific-map'
  ;;        ("C-c M-x" . consult-mode-command)
  ;;        ("C-c h" . consult-history)
  ;;        ("C-c k" . consult-kmacro)
  ;;        ("C-c m" . consult-man)
  ;;        ("C-c i" . consult-info)
  ;;        ([remap Info-search] . consult-info)
  ;;        ;; C-x bindings in `ctl-x-map'
  ;;        ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  ;;        ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  ;;        ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  ;;        ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  ;;        ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
  ;;        ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  ;;        ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  ;;        ;; Custom M-# bindings for fast register access
  ;;        ("M-#" . consult-register-load)
  ;;        ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  ;;        ("C-M-#" . consult-register)
  ;;        ;; Other custom bindings
  ;;        ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  ;;        ;; M-g bindings in `goto-map'
  ;;        ("M-g e" . consult-compile-error)
  ;;        ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  ;;        ("M-g g" . consult-goto-line)             ;; orig. goto-line
  ;;        ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  ;;        ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  ;;        ("M-g m" . consult-mark)
  ;;        ("M-g k" . consult-global-mark)
  ;;        ("M-g i" . consult-imenu)
  ;;        ("M-g I" . consult-imenu-multi)
  ;;        ;; M-s bindings in `search-map'
  ;;        ("M-s d" . consult-find)                  ;; Alternative: consult-fd
  ;;        ("M-s c" . consult-locate)
  ;;        ("M-s g" . consult-grep)
  ;;        ("M-s G" . consult-git-grep)
  ;;        ("M-s r" . consult-ripgrep)
  ;;        ("M-s l" . consult-line)
  ;;        ("M-s L" . consult-line-multi)
  ;;        ("M-s k" . consult-keep-lines)
  ;;        ("M-s u" . consult-focus-lines)
  ;;        ;; Isearch integration
  ;;        ("M-s e" . consult-isearch-history)
  ;;        :map isearch-mode-map
  ;;        ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  ;;        ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  ;;        ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  ;;        ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  ;;        ;; Minibuffer history
  ;;        :map minibuffer-local-map
  ;;        ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  ;;        ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  ;; :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  ;; :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  ;; (setq register-preview-delay 0.5
  ;;       register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  ;; (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  ;; (setq xref-show-xrefs-function #'consult-xref
  ;;       xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  ;; :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  ;; (consult-customize
  ;;  consult-theme :preview-key '(:debounce 0.2 any)
  ;;  consult-ripgrep consult-git-grep consult-grep
  ;;  consult-bookmark consult-recent-file consult-xref
  ;;  consult--source-bookmark consult--source-file-register
  ;;  consult--source-recent-file consult--source-project-recent-file
  ;;  ;; :preview-key "M-."
  ;;  :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  ;; (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
  )

#+end_src
*** Embark
https://github.com/oantolin/embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

#+end_src
*** Embark Consult package
https://github.com/oantolin/embark
Consult users will also want the embark-consult package.

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t ; only need to install it, embark loads it after consult if found
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))

#+end_src
*** Marginalia package
https://github.com/minad/marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :bind
  (:map minibuffer-local-map
        ("M-A" . marginalia-cycle))
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'right)
  :init
  (marginalia-mode))

#+end_src
*** Orderless package
https://github.com/oantolin/orderless

#+begin_src emacs-lisp
(use-package orderless
  :custom
  (completion-styles '(orderless))
  (completion-category-defaults nil)    ; I want to be in control!
;  (completion-category-overrides
;   '((file (styles basic-remote ; For `tramp' hostname completion with `vertico'
;                   orderless
;                   ))
;     ))

  (orderless-component-separator 'orderless-escapable-split-on-space)
  (orderless-matching-styles
   '(orderless-literal
     orderless-prefixes
     orderless-initialism
     orderless-regexp
     ;; orderless-flex
     ;; orderless-strict-leading-initialism
     ;; orderless-strict-initialism
     ;; orderless-strict-full-initialism
     ;; orderless-without-literal          ; Recommended for dispatches instead
     ))
  (orderless-style-dispatchers
   '(prot-orderless-literal-dispatcher
     prot-orderless-strict-initialism-dispatcher
     prot-orderless-flex-dispatcher
     ))
  :init
  (defun prot-orderless-literal-dispatcher (pattern _index _total)
    "Literal style dispatcher using the equals sign as a suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "=" pattern)
      `(orderless-literal . ,(substring pattern 0 -1))))

  (defun prot-orderless-strict-initialism-dispatcher (pattern _index _total)
    "Leading initialism  dispatcher using the comma suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "," pattern)
      `(orderless-strict-initialism . ,(substring pattern 0 -1))))

  (defun prot-orderless-flex-dispatcher (pattern _index _total)
    "Flex  dispatcher using the tilde suffix.
It matches PATTERN _INDEX and _TOTAL according to how Orderless
parses its input."
    (when (string-suffix-p "." pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))
  )
#+end_src
*** Vertico package
https://github.com/minad/vertico

#+begin_src emacs-lisp
(use-package vertico
  :custom
  (vertico-count 13)
  (vertico-resize t)
  (vertico-cycle nil)

  :init
  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun mrb-basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun mrb-basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 mrb-basic-remote-try-completion mrb-basic-remote-all-completions nil))
  (vertico-mode))
#+end_src
*** Savehist package
Vertico sorts by history position, enable =savehist= to persist history over Emacs restarts.

#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))

#+end_src
*** Emacs
Some more usefull changes to emacs config that helps vertico

#+begin_src emacs-lisp
(use-package emacs
  :init

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

** dashboard
An extensible emacs startup screen showing you what’s most important.

https://github.com/emacs-dashboard/emacs-dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  ;;(setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "/home/dt/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (projects . 5)
                          (agenda . 3)
                          (bookmarks . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

** diminish
This package implements hiding or abbreviation of the mode line
displays (lighters) of minor-modes. With this package installed, you
can add ‘:diminish’ to any use-package block to hide that particular
mode in the modeline.

https://github.com/emacsmirror/diminish
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** dired-open, peek-dired
dired-open - This package adds a mechanism to add "hooks" to dired-find-file that will run before emacs tries its own mechanisms to open the file, thus enabling you to launch other application or code and suspend the default behaviour.

https://github.com/Fuco1/dired-hacks
#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "open")
                                ("jpg" . "open")
                                ("png" . "open")
                                ("pdf" . "open")
                                ("mkv" . "open")
                                ("mp4" . "open"))))


#+end_src

peek-dired - =archived= This is a minor mode that can be enabled from a dired buffer. Once enabled it will show the file from point in the other window.

https://github.com/asok/peep-dired
#+begin_src emacs-lisp
(use-package peep-dired
  :after (dired evil)
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src 

** eshell-syntax-highlighting
This package adds syntax highlighting to the Emacs Eshell. It
highlights user commands at the interactive prompt to provide feedback
on the validity of commands and syntax.

https://github.com/akreisher/eshell-syntax-highlighting
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))
#+end_src

** evil
Evil is an extensible vi/vim layer for Emacs. Because...let's face
it. The Vim keybindings are just plain better.

https://github.com/emacs-evil/evil
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-C-u-scroll t)
  (evil-mode 1)
  :config
  (bind-keys
   :map evil-motion-state-map
   ((kbd "RET") . nil)))
#+end_src

** evil-org-mode
Supplemental evil-mode keybindings to emacs org-mode 

https://github.com/Somelauw/evil-org-mode
#+begin_src emacs-lisp
;; (require 'evil-org)
;; (add-hook 'org-mode-hook 'evil-org-mode)
;; (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
;; (require 'evil-org-agenda)
;; (evil-org-agenda-set-keys)
(use-package evil-org
  :after (org evil)
  :diminish
  :hook (org-mode . evil-org-mode)
  :config
  (evil-org-set-key-theme)
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

** evil-tutor
Vimtutor adapted to Emacs+Evil and wrapped in a major mode. 

https://github.com/syl20bnr/evil-tutor
#+begin_src emacs-lisp
(use-package evil-tutor)
#+end_src

** flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs, intended as replacement for the older Flymake extension which is part of GNU Emacs.

https://www.flycheck.org/
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src
** general
General provides a more convenient method for binding keys in emacs
(for both evil and non-evil users).  Like use-package, which provides
a convenient, unified interface for managing packages, general.el is
intended to provide a convenient, unified interface for key
definitions.

https://github.com/noctuid/general.el
#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; setup 'SPC' as the global leader key
  (general-create-definer mrb-leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set the leader key
    :global-prefix "M-SPC") ;; use ALT-SPC in insert mode to access leader

  (mrb-leader-keys
    ;"SPC" '(counsel-M-x :wk "Counsel M-x")
    "SPC" '(consult-mode-command :wk "Consult Mode Command")
    "." '(find-file :wk "Find file")
    ;; "=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))

  (mrb-leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (mrb-leader-keys
    "e" '(:ignore t :wk "Elisp/Evaluate")
    "e b" '(evaluate-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate an elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expresion before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :which-key "Eshell"))

  (mrb-leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (mrb-leader-keys
    "f" '(:ignore t :wk "Files")
    "f c" '((lambda () (interactive)
              (find-file (expand-file-name "config.org" user-emacs-directory)))
            :wk "Open emacs config.org")
    "f e" '((lambda () (interactive)
              (dired user-emacs-directory))
            :wk "Open user-emacs-directory in dired")
    "f d" '(find-grep-dired :wk "Search for string in files in DIR")
    "f g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "f i" '((lambda () (interactive)
              (find-file (expand-file-name "init.el" user-emacs-directory)))
            :wk "Open emacs init.el")
    "f j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "f l" '(counsel-locate :wk "Locate a file")
    "f r" '(counsel-recentf :wk "Find recent files")
    "f u" '(sudo-edit-find-file :wk "Sudo find file")
    "f U" '(sudo-edit :wk "Sudo edit file"))

  (mrb-leader-keys
    "g" '(:ignore t :wk "Git")    
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create") 
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find") 
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

  (mrb-leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file user-init-file))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (mrb-leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (mrb-leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

  (mrb-leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (mrb-leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (mrb-leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (mrb-leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t s" '(toggle-frame-fullscreen :wk "Toggle fullscreen")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (mrb-leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows (aka Buffers)
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )
#+end_src

** git-timemachine
git-timemachine is a program that allows you to move backwards and forwards through a file’s commits.  ‘SPC g t’ will open the time machine on a file if it is in a git repo.  Then, while in normal mode, you can use ‘CTRL-j’ and ‘CTRL-k’ to move backwards and forwards through the commits.

https://github.com/emacsmirror/git-timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :after git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-j") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-k") 'git-timemachine-show-next-revision))
#+end_src

** hl-todo
Adding highlights to TODO and related words.

https://github.com/tarsius/hl-todo
#+begin_src 
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

** ligature
Display typographical ligatures in Emacs, plus some code to only load
the ligiture package if the current emacs supports it.

https://github.com/mickeynp/ligature.el
https://github.com/d12frosted/homebrew-emacs-plus/pull/371#issuecomment-1277583488
#+begin_src emacs-lisp
(use-package ligature
  ;; Only load this extension if emacs > 27 and running on macos or built with harfbuzz.
  :if (and (> emacs-major-version 27)
           (or (featurep 'ns)
               (string-match-p "HARFBUZZ" system-configuration-features))
           (featurep 'composite))  ; Emacs loads `composite' at startup
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src
** magit
Magit is a full-featured git client for Emacs.

https://magit.vc/manual/
#+begin_src emacs-lisp
(use-package magit)
#+end_src

** neotree
Neotree is a file tree viewer.  When you open neotree, it jumps to the
current file thanks to neo-smart-open.  The neo-window-fixed-size
setting makes the neotree width be adjustable.  NeoTree provides
following themes: classic, ascii, arrow, icons, and nerd.  Theme can
be configed by setting "two" themes for neo-theme: one for the GUI and
one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings,
so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION               | KEYBINDING |
|----------------+---------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree- dir   | /Open directory in neotree/ | SPC d n    |

https://github.com/jaypei/emacs-neotree
#+begin_src emacs-lisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action)
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))
#+end_src

** org-bullets
Show org-mode bullets as utf-8 characters

https://github.com/sabof/org-bullets
#+begin_src emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** projectile
Projectile is a project interaction library for Emacs. Its goal is to provide a nice set of features operating on a project level without introducing external dependencies (when feasible).

https://projectile.mx/
#+begin_src emacs-lisp
(use-package projectile
  :bind ("C-c p" . projectile-command-map)
  :config
  (setq projectile-project-search-path '("~/src/" "~/gitlab/" ("~/github/mrxcitement" . 1)))
  (projectile-mode 1))

#+end_src

** rainbow-delimeters
rainbow-delimiters is a "rainbow parentheses"-like mode which
highlights delimiters such as parentheses, brackets or braces
according to their depth. Each successive level is highlighted in a
different color. This makes it easy to spot matching delimiters,
orient yourself in the code, and tell which statements are at a given
depth.

https://github.com/Fanael/rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config (rainbow-delimiters-mode)
  :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
         (clojure-mode . rainbow-delimiters-mode)))
#+end_src
** rainbow-mode
Display the actual color as a background for any hex color value
(ex. #ffffff).  The code block below enables rainbow-mode in all
programming modes (prog-mode) as well as org-mode, which is why
rainbow works in this document.

https://elpa.gnu.org/packages/rainbow-mode.html
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook
  ((org-mode prog-mode) . rainbow-mode))

;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link  t)
#+end_src
** sudo-edit
sudo-edit gives us the ability to open files with sudo privileges or
switch over to editing with sudo privileges if we initially opened the
file without such privileges.

https://github.com/nflath/sudo-edit
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (mrb-leader-keys
    "f s" '(sudo-edit-find-file :wk "Sudo find file")
    "f S" '(sudo-edit :wk "Sudo edit file")))
#+end_src
** themes
Install themes for GUI and TUI
#+begin_src emacs-lisp
;; (use-package modus-themes)

(use-package vs-dark-theme
  :if window-system)

(use-package vs-light-theme
  :if window-system)

(use-package deeper-blue-theme
  :disabled
  :if (not window-system)
  :init
  (load-theme 'deeper-blue))
#+end_src

** toc-org
Allows us to create a Table of Contents in our Org docs.

https://github.com/snosov1/toc-org
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** vterm
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU
Emacs based on libvterm, a C library. As a result of using compiled
code (instead of elisp), emacs-libvterm is fully capable, fast, and it
can seamlessly handle large outputs.

https://github.com/akermu/emacs-libvterm
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq vterm-max-scrollback 5000))
#+end_src

** vterm-toggle
This package provides the command vterm-toggle which toggles between
the vterm buffer and whatever buffer you are editing.

https://github.com/jixiuf/vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

** which-key
which-key is a minor mode for Emacs that displays the key bindings
following your currently entered incomplete command (a prefix) in a
popup.

https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :diminish
  ;;  :config
  ;;  (setq which-key-side-window-location 'bottom
  ;;        which-key-sort-order #'which-key-key-order-alpha
  ;;        which-key-allow-imprecise-window-fit nil
  ;;        which-key-sort-uppercase-first nil
  ;;        which-key-add-column-padding 1
  ;;        which-key-max-display-columns nil
  ;;        which-key-min-display-lines 6
  ;;        which-key-side-window-slot -10
  ;;        which-key-side-window-max-height 0.25
  ;;        which-key-idle-delay 0.8
  ;;        which-key-max-description-length 25
  ;;        which-key-allow-imprecise-window-fit nil
  ;;        which-key-separator " → " )
)
#+end_src

* Emacs Settings
** Customize
Set the `custom' file and location.

#+begin_src emacs-lisp
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+end_src

** Defaults 
In confirmation dialogs, we want to be able to type y and n instead of
having to spell the whole words
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Use spaces, but configure tab-width for modes that require tabs
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+end_src

** Dired
Highlight the current line when in dired mode.

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
	  (lambda() (hl-line-mode 1)))
#+end_src

** Environment

*** macOS (darwin)
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  ;; Force the current directory to be the users home dir
  (setq default-directory "~/")

  ;; Use the provided elisp version of ls
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))
#+end_src

*** Linux
#+begin_src emacs-lisp
(when (eq system-type 'linux))
#+end_src

*** Windows
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt))
#+end_src

** Eshell
Configure the eshell mode
#+begin_src emacs-lisp
;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Lock Buffers
#+begin_src emacs-lisp
(save-excursion
  (set-buffer "*scratch*")
  (emacs-lock-mode 'kill)
  (set-buffer "*Messages*")
  (emacs-lock-mode 'kill))
#+end_src

** Backup
#+begin_src emacs-lisp
;; Remove trailing whitespace from lines when saving files
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Set the temp directory to be a directory in the users home
;; directory. ~/tmp/emacs
(let ((temp-directory (expand-file-name "~/tmp/emacs/")))
  ;; make the temp directory
  (make-directory temp-directory t)
  ;; Backup files to the temp directory
  (setq backup-by-copying t)
  (setq backup-directory-alist
        `((".*" . ,temp-directory)
          (,tramp-file-name-regexp nil))))
#+end_src

** Org Mode
*** Disable Electric Indent
By disabling electric mode, formating of emacs-lisp is not wonky!?

#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

*** Fix formatting in src blocks
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0)
#+end_src

*** Structure Templates
Org-tempo is not a separate package but a module within org that can
be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a
begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

https://orgmode.org/manual/Structure-Templates.html
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
** Server
#+begin_src emacs-lisp
;; Darwin (Mac OS X)
(when (eq system-type 'darwin))

;; Gnu/linux
(when (eq system-type 'gnu/linux))

;; Windows
(when (eq system-type 'windows-nt)
  (setq server-auth-dir (getenv "TMP")))

;; When running as a GUI
;; Start a server for client processes, but only if one is not already running
(when (window-system)
  (load "server")
  (unless (server-running-p)
    (server-start)))
#+end_src

** Spelling
#+begin_src emacs-lisp
(when (executable-find "hunspell")
  (setq ispell-program-name "hunspell")

  (when (eq system-type 'darwin)
    (setenv "DICTIONARY" "en_US"))

  (when (eq system-type 'windows-nt)
    (setq ispell-local-dictionary-alist
	  '((nil "[[:alpha:]]" "[^[:alpha:]]" "[']" t ("-d" "en_US") nil utf-8))))

  ;; Turn flyspell programming mode on
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode)
  ;; (add-hook 'python-mode-hook
  ;; 	  (lambda () (flyspell-prog-mode)))
  )
#+end_src

** Theme
#+begin_src emacs-lisp
;; Apply theme based on system appearance
(defun mrb-apply-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (interactive)
  (setq modus-themes-mode-line '(accented borderless (padding 2) (height 0.9)))
  (setq modus-themes-region '(bg-only))
  (setq modus-themes-completions '((t background intense accented)))
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'modus-operandi t))
    ('dark (load-theme 'modus-vivendi t))))

;; Apply light theme
(defun mrb-apply-theme-light ()
  "Apply the light theme"
  (interactive)
  (mrb-apply-theme 'light))

;; Apply dark theme
(defun mrb-apply-theme-dark ()
  "Apply the dark theme"
  (interactive)
  (mrb-apply-theme 'dark))

;; Customize light theme after load
(defun mrb-customize-theme-light ()
  "Customize light theme"
  (require 'color)
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 5)))

;; Customize themes after load
(defun mrb-customize-theme ()
  "Customize themes"

  ;; comments and keywords italicized
  (set-face-italic 'font-lock-comment-face t)
  (set-face-italic 'font-lock-keyword-face t)

  (if (or (member 'vs-light custom-enabled-themes)
          (member 'modus-operandi custom-enabled-themes))
      (mrb-customize-theme-light)))

(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")

(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))

;; When the theme is changed  apply customizations
(add-hook 'after-load-theme-hook 'mrb-customize-theme)
#+end_src
*** macOS (darwin)
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  ;; Hook to change theme based on system appearence
  (add-hook 'ns-system-appearance-change-functions #'mrb-apply-theme))

#+end_src
** UI

#+begin_src emacs-lisp
;;; Any UI
(blink-cursor-mode -1)
(column-number-mode t)
(show-paren-mode t)

;; Set default display line number to 'relative
(setq display-line-numbers-type 'relative)
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Whitespace display configuration
(setq whitespace-line-column 80 whitespace-style
      '(face newline space-mark tab-mark newline-mark trailing lines-tail))

;; Any GUI/TUI configuration
(defun mrb-after-make-frame-any (&optional frame)
  "Configure a new FRAME (default: selected frame) on any system."

  ;; comments and keywords italicized
  (set-face-italic 'font-lock-comment-face t)
  (set-face-italic 'font-lock-keyword-face t)

  ;; Display the menubar in GUI and hide in TUI frames
  (let ((lines (if (display-graphic-p frame) 1 0)))
    (set-frame-parameter frame 'menu-bar-lines lines)))

;; Handle Emacs run as a daemon or not
(if (daemonp)
    ;; Add hook to configure new frames either GUI or TUI
    (add-hook 'after-make-frame-functions 'mrb-after-make-frame-any)
  (mrb-after-make-frame-any))
#+end_src

*** macOS (darwin)
#+begin_src emacs-lisp
;;; Darwin UI
(when (eq system-type 'darwin)

  ;; Frame configuration for `darwin'
  (defun mrb-after-make-frame-darwin(&optional frame)
    "Configure a new FRAME (default: selected frame) on `darwin' system"

    (message "mrb-after-make-frame-darwin")

    ;; When the frame is GUI
    (when (display-graphic-p)

      ;; set key to toggle fullscreen mode
      ;; (global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)

      ;; set default fonts
      (when (member "FiraCode Nerd Font" (font-family-list))
        (set-face-font 'default "FiraCode Nerd Font Mono")
        (set-face-font 'fixed-pitch "FiraCode Nerd Font Mono"))

      (when (member "Helvetica Neue" (font-family-list))
        (set-face-font 'variable-pitch "Helvetica Neue"))

      ;; raise Emacs using AppleScript."
      (ns-do-applescript "tell application \"Emacs\" to activate")))

  ;; Handle Emacs run as a daemon or not
  (if (daemonp)
      ;; Add hook to configure new frames either GUI or TUI
      (add-hook 'after-make-frame-functions 'mrb-after-make-frame-darwin)
    (mrb-after-make-frame-darwin t)))

#+end_src

*** Linux
#+begin_comment
#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux)

  ;; Frame configuration for `windows' systems.
  (defun mrb-after-make-frame-linux(&optional frame)
    "Configure a new FRAME (default: selected frame) on `linux' system"

    ;; When the frame is GUI
    (when (display-graphic-p)

      ;; Font customization
      (when (member "Monospace" (font-family-list))
        (set-face-font 'default "Monospace 11"))))

  ;; Hook make frame to apply `linux' specific configuration
  (add-hook 'after-make-frame-functions 'mrb-after-make-frame-linux)

  ;; Emacs not started in `daemon' mode.
  (unless (daemonp)
    (mrb-after-make-frame-linux)))
#+end_src
#+end_comment
*** Windows
#+begin_comment
#+begin_src emacs-lisp
(when (eq system-type 'windows-nt)

  ;; Frame configuration for `windows' systems.
  (defun mrb-after-make-frame-windows(&optional frame)
    "Configure a new FRAME (default: selected frame) on `windows' system"

    ;; When the frame is GUI
    (when (display-graphic-p)

      ;; Font customization
      (when (member "Lucida Console" (font-family-list))
        (set-face-font 'default "Lucida Console 10"))))

  ;; Hook make frame to apply `windows' specific configuration
  (add-hook 'after-make-frame-functions 'mrb-after-make-frame-windows)

  ;; Emacs not started in `daemon' mode.
  (unless (daemonp)
    (mrb-after-make-frame-windows)))
#+end_src
#+end_comment

** Zoom Text In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)
(global-set-key (kbd "s-0") (lambda () (interactive) (text-scale-set 0)))
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


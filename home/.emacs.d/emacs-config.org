-*- mode: org; fill-column: 80; -*-
#+TITLE: Emacs configuration
#+AUTHOR: Mike Barker
#+EMAIL: mike@thebarkers.com
#+DATE: Time-stamp:
#+BABEL: :cache yes
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* Begin at the begining
** Customization files

Customizations are written to the =custom.el= file.
This file is *not* stored in the git repo.
Any customized setting that is written to this file should be thought of as temporary.
Make sure any customization you want to keep are moved out of the =custom.el= file and into this one.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

I want a quick way to open the config file =emacs-config.org=, so I have added it's own keybinding.
#+begin_src emacs-lisp
  (defun user/open-emacs-config ()
    (interactive)
    (find-file user/emacs-config-file))
  ;; I wanted something with '~'
  (global-set-key (kbd "C-~") 'user/open-emacs-config)
#+end_src

* Package Mangement
  
Get the package management system up and running

#+begin_src emacs-lisp
;; Need to load
(if (version< emacs-version "27")
  (package-initialize))

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

;; Set explicit priorities (gnu is the default package-archive)
(setq package-archive-priorities '(("org" . 4)
                                   ("melpa" . 3)
                                   ("melpa-stable" . 2)
                                   ("gnu" . 1)))

(unless (package-installed-p 'use-package) ; Bootstrap use-package
  (message "Use package needs to be installed")
  (package-refresh-contents)
  (package-install 'use-package))

#+end_src

Install the =use-package= package

#+begin_src emacs-lisp
;; Use-package can now be used for itself
(use-package use-package
  :init
  (setq use-package-always-ensure t)  ; Try installing automatically
  (setq use-package-verbose nil)              ; Set to true when interested in load times
  ;; If running as daemon, there's no reason to defer,just load shite
  ;; to minimize chance of lockup, but it still happens sometimes.
  (if (daemonp)
      (setq use-package-always-demand t))

  (use-package use-package-ensure-system-package :ensure t)   ; Need this because we are in use-package config

  ;; Location where I keep custom packages
  (setq custom-package-directory (concat user-emacs-directory "lisp/")))
#+end_src

* Packages
** exec-path-from-shell
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-initialize))
#+end_src

#+RESULTS:
: t

** Vim emulation
I use the EVIL package to provide vim keybindings in emacs.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+end_src
* Environment
** Darwin
Setup darwin (mac os x) environment setup here...
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    ;; Setup the path.
    ;; (let ((mypaths '("~/bin"
    ;; 		     "/usr/local/bin"
    ;; 		     "/usr/local/sbin"
    ;; 		     "/usr/bin"
    ;; 		     "/usr/sbin"
    ;; 		     "/bin"
    ;; 		     "/sbin")))
    ;;   (setenv "PATH" (mapconcat 'identity mypaths ":"))
    ;;   (setq exec-path mypaths))

    ;; Force the current directory to be the users home dir
    ;; (setq default-directory "~/")

    ;; Use the provided elisp version of ls
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program nil))
#+end_src

** Linux

Setup linux environment here...
#+begin_src emacs-lisp
  (when (eq system-type 'linux))
#+end_src

** Windows

Setup window environment here...
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt))
#+end_src

* Interface Settings
** UI settings
   
Customize the UI settings
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (blink-cursor-mode -1)
  (column-number-mode t)
  (show-paren-mode t)
  (tool-bar-mode -1)
#+end_src

** Whitespace

Customize the whitespace settings
#+begin_src emacs-lisp
  (setq whitespace-line-column 80 whitespace-style
	'(face newline space-mark tab-mark newline-mark trailing lines-tail))
#+end_src

* Graphical settings
** Any OS
#+begin_src emacs-lisp
  (when (window-system)
    (defun user/toggle-fullscreen ()
      "Toggle full screen"
      (interactive)
      (set-frame-parameter
       nil 'fullscreen
       (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
    (global-set-key [f11] 'user/toggle-fullscreen))
#+end_src

** Darwin (macOS)
Add keybinding =<cmd><return>= to toggle fullscreen.
Set the font
#+begin_src emacs-lisp
  (when (and (window-system) (eq system-type 'darwin))
      (global-set-key (kbd "s-<return>") 'user/toggle-fullscreen)
      (when (member "FiraCode Nerd Font" (font-family-list))
	  (set-frame-font "FiraCode Nerd Font" t t)))
#+end_src

** Linux
Set the font
#+begin_src emacs-lisp
  (when (and (window-system) (eq system-type 'gnu/linux))
    (when (member "Monospace" (font-family-list))
      (set-face-font 'default "Monospace 11")))
#+end_src

** Windows
Set the font
#+begin_src emacs-lisp
  (when (and (window-system) (eq system-type 'windows-nt))
    (when (member "Lucida Console" (font-family-list))
      (set-face-font 'default "Lucida Console 10")))
#+end_src

* Text settings
** Any OS
Turn of the menu bar
xterm: remap select key to =<shift><up>=
#+begin_src emacs-lisp
  (when (not (window-system))
    (menu-bar-mode -1)
    ;; on xterm's remap the select key to shift-up
    (if (string-match-p "xterm" (tty-type))
	(define-key input-decode-map "\e[1;2A" [S-up])))
#+end_src

